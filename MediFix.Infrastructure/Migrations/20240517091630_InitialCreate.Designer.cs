// <auto-generated />
using System;
using MediFix.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediFix.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240517091630_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.Property<Guid>("ExpertisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PractitionersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpertisesId", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("PractitionerExpertise", (string)null);
                });

            modelBuilder.Entity("MediFix.Application.Users.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MediFix.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ff96170-d696-41c1-911a-1b9ae24b1fe6"),
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = new Guid("9b6cd8c3-0953-47ac-84e4-12e6e14ea139"),
                            Name = "Air conditioning"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name", "CategoryId")
                        .IsUnique();

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d480b772-0e4b-4bca-9e76-21b76d6cf063"),
                            CategoryId = new Guid("8ff96170-d696-41c1-911a-1b9ae24b1fe6"),
                            Name = "Toilet"
                        },
                        new
                        {
                            Id = new Guid("fe509933-cacb-4408-8d46-a6bb93bfb797"),
                            CategoryId = new Guid("8ff96170-d696-41c1-911a-1b9ae24b1fe6"),
                            Name = "Tap"
                        },
                        new
                        {
                            Id = new Guid("28ccc01c-aa51-46e2-8ecf-cbaece648e5b"),
                            CategoryId = new Guid("8ff96170-d696-41c1-911a-1b9ae24b1fe6"),
                            Name = "Water Bar"
                        },
                        new
                        {
                            Id = new Guid("07848a3e-77d8-4939-b125-d4e10e11d8cb"),
                            CategoryId = new Guid("9b6cd8c3-0953-47ac-84e4-12e6e14ea139"),
                            Name = "Air conditioner does not cool"
                        },
                        new
                        {
                            Id = new Guid("73a9982c-e1b9-417d-b283-9d932abb5613"),
                            CategoryId = new Guid("9b6cd8c3-0953-47ac-84e4-12e6e14ea139"),
                            Name = "Noisy air conditioner"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LocationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "LocationType", "ParentId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3a6d6cd-0c8d-4c2c-9535-08e301e2ec55"),
                            IsActive = true,
                            LocationType = (byte)1,
                            Name = "A"
                        },
                        new
                        {
                            Id = new Guid("fff18b54-3f30-4b71-89f1-edebb0a9e38b"),
                            IsActive = true,
                            LocationType = (byte)2,
                            Name = "0",
                            ParentId = new Guid("c3a6d6cd-0c8d-4c2c-9535-08e301e2ec55")
                        },
                        new
                        {
                            Id = new Guid("eae8082b-5759-4be8-ae95-433f7bc26a53"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "HR",
                            ParentId = new Guid("fff18b54-3f30-4b71-89f1-edebb0a9e38b")
                        },
                        new
                        {
                            Id = new Guid("be2a5d40-61c7-45e9-a0b3-69b7110bf03b"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "IT",
                            ParentId = new Guid("fff18b54-3f30-4b71-89f1-edebb0a9e38b")
                        },
                        new
                        {
                            Id = new Guid("a9374dcc-fc00-4738-8a05-897159be9d7c"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "100",
                            ParentId = new Guid("eae8082b-5759-4be8-ae95-433f7bc26a53")
                        },
                        new
                        {
                            Id = new Guid("7ea2940a-1376-46c9-bc99-7b539a442a1a"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "101",
                            ParentId = new Guid("eae8082b-5759-4be8-ae95-433f7bc26a53")
                        },
                        new
                        {
                            Id = new Guid("a16f384d-e250-495a-a0e5-d5e35e4c7e8c"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "102",
                            ParentId = new Guid("eae8082b-5759-4be8-ae95-433f7bc26a53")
                        },
                        new
                        {
                            Id = new Guid("a32738c7-15a4-40dd-9208-06ada1dbf886"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "200",
                            ParentId = new Guid("be2a5d40-61c7-45e9-a0b3-69b7110bf03b")
                        },
                        new
                        {
                            Id = new Guid("94870660-c5fd-4b98-afa1-1f18af8f0b24"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "201",
                            ParentId = new Guid("be2a5d40-61c7-45e9-a0b3-69b7110bf03b")
                        },
                        new
                        {
                            Id = new Guid("b747784b-6b92-4b97-a9a3-13b7ff8deea6"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "202",
                            ParentId = new Guid("be2a5d40-61c7-45e9-a0b3-69b7110bf03b")
                        });
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PractitionerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ServiceCallType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StatusDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PractitionerId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceCalls");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Expertise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Practitioner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("MediFix.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("85ff9c87-dd28-4ffb-b8c4-608b29fd31f0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.HasOne("MediFix.Domain.Users.Expertise", null)
                        .WithMany()
                        .HasForeignKey("ExpertisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.HasOne("MediFix.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionerId");

                    b.HasOne("MediFix.Domain.Categories.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MediFix.Domain.ServiceCalls.ServiceCallStatusUpdate", "StatusHistory", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("PractitionerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ServiceCallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte>("Status")
                                .HasColumnType("tinyint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("PractitionerId");

                            b1.HasIndex("ServiceCallId");

                            b1.HasIndex("UpdatedBy");

                            b1.ToTable("ServiceCallStatusUpdate");

                            b1.HasOne("MediFix.Domain.Users.Practitioner", null)
                                .WithMany()
                                .HasForeignKey("PractitionerId")
                                .OnDelete(DeleteBehavior.NoAction);

                            b1.WithOwner()
                                .HasForeignKey("ServiceCallId");

                            b1.HasOne("MediFix.Domain.Users.User", null)
                                .WithMany()
                                .HasForeignKey("UpdatedBy")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();
                        });

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Manager", b =>
                {
                    b.HasOne("MediFix.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("MediFix.Domain.Users.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Users.Practitioner", b =>
                {
                    b.HasOne("MediFix.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("MediFix.Domain.Users.Practitioner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
