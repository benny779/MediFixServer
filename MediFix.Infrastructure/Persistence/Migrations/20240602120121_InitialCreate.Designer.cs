// <auto-generated />
using System;
using MediFix.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediFix.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240602120121_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.Property<Guid>("ExpertisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PractitionersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpertisesId", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("PractitionerExpertise", (string)null);
                });

            modelBuilder.Entity("MediFix.Application.Users.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RefreshTokenValidity")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MediFix.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a855856-dfa0-4c1f-873e-ec6ba59b7044"),
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = new Guid("36abe8d9-a6bd-4c8c-a3b1-c02961648cee"),
                            Name = "Air conditioning"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name", "CategoryId")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("965b3ac8-1893-4059-a274-cf38d51b5ea5"),
                            CategoryId = new Guid("7a855856-dfa0-4c1f-873e-ec6ba59b7044"),
                            Name = "Toilet"
                        },
                        new
                        {
                            Id = new Guid("f88b5c4f-a308-46ce-a4eb-3cc3e4fe3adc"),
                            CategoryId = new Guid("7a855856-dfa0-4c1f-873e-ec6ba59b7044"),
                            Name = "Tap"
                        },
                        new
                        {
                            Id = new Guid("92ecb6ac-6f0e-4bc2-8d44-c93af4b1f885"),
                            CategoryId = new Guid("7a855856-dfa0-4c1f-873e-ec6ba59b7044"),
                            Name = "Water Bar"
                        },
                        new
                        {
                            Id = new Guid("8f45b7aa-a413-4150-958a-98b628e46004"),
                            CategoryId = new Guid("36abe8d9-a6bd-4c8c-a3b1-c02961648cee"),
                            Name = "Air conditioner does not cool"
                        },
                        new
                        {
                            Id = new Guid("0bb18790-8338-4987-b713-d99ec536c3ef"),
                            CategoryId = new Guid("36abe8d9-a6bd-4c8c-a3b1-c02961648cee"),
                            Name = "Noisy air conditioner"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LocationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "LocationType", "ParentId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8024cb7c-1f1a-4bb0-8eb9-a2b8bf0a0993"),
                            IsActive = true,
                            LocationType = (byte)1,
                            Name = "A"
                        },
                        new
                        {
                            Id = new Guid("fd12a45c-2b6c-48a5-aa26-33b11edbf0c8"),
                            IsActive = true,
                            LocationType = (byte)2,
                            Name = "0",
                            ParentId = new Guid("8024cb7c-1f1a-4bb0-8eb9-a2b8bf0a0993")
                        },
                        new
                        {
                            Id = new Guid("33ddc98a-7a30-4840-8910-340702848219"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "HR",
                            ParentId = new Guid("fd12a45c-2b6c-48a5-aa26-33b11edbf0c8")
                        },
                        new
                        {
                            Id = new Guid("a4454b57-6af8-4dcc-97a2-81fc4df22d5e"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "IT",
                            ParentId = new Guid("fd12a45c-2b6c-48a5-aa26-33b11edbf0c8")
                        },
                        new
                        {
                            Id = new Guid("6b23f02b-3e44-40b6-963b-460689c369a1"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "100",
                            ParentId = new Guid("33ddc98a-7a30-4840-8910-340702848219")
                        },
                        new
                        {
                            Id = new Guid("c061f83b-37e6-40de-8dc3-f77442f82d1c"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "101",
                            ParentId = new Guid("33ddc98a-7a30-4840-8910-340702848219")
                        },
                        new
                        {
                            Id = new Guid("5dfbbd60-2c7c-4f2d-8fc9-e93bbafc806f"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "102",
                            ParentId = new Guid("33ddc98a-7a30-4840-8910-340702848219")
                        },
                        new
                        {
                            Id = new Guid("2b488c92-b8a5-42b1-aeb2-b7dbd036b48e"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "200",
                            ParentId = new Guid("a4454b57-6af8-4dcc-97a2-81fc4df22d5e")
                        },
                        new
                        {
                            Id = new Guid("48a2593e-53ca-4b42-a49d-c9ac38c959a7"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "201",
                            ParentId = new Guid("a4454b57-6af8-4dcc-97a2-81fc4df22d5e")
                        },
                        new
                        {
                            Id = new Guid("452050ca-d8f0-4b71-a88f-4643fdadea1d"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "202",
                            ParentId = new Guid("a4454b57-6af8-4dcc-97a2-81fc4df22d5e")
                        });
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ServiceCallType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ServiceCalls");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Expertise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Practitioner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.HasOne("MediFix.Domain.Users.Expertise", null)
                        .WithMany()
                        .HasForeignKey("ExpertisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.HasOne("MediFix.Domain.Categories.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.HasOne("MediFix.Domain.Users.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Categories.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MediFix.Domain.ServiceCalls.ServiceCallStatusUpdate", "StatusHistory", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("PractitionerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ServiceCallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte>("Status")
                                .HasColumnType("tinyint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("PractitionerId");

                            b1.HasIndex("ServiceCallId");

                            b1.ToTable("ServiceCallStatusUpdate");

                            b1.HasOne("MediFix.Domain.Users.Practitioner", null)
                                .WithMany()
                                .HasForeignKey("PractitionerId")
                                .OnDelete(DeleteBehavior.NoAction);

                            b1.WithOwner()
                                .HasForeignKey("ServiceCallId");
                        });

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
