// <auto-generated />
using System;
using MediFix.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediFix.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240630174020_AddServiceCallStatusAndPractitioner")]
    partial class AddServiceCallStatusAndPractitioner
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.Property<Guid>("ExpertisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PractitionersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpertisesId", "PractitionersId");

                    b.HasIndex("PractitionersId");

                    b.ToTable("PractitionerExpertise", (string)null);
                });

            modelBuilder.Entity("MediFix.Application.Users.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RefreshTokenValidity")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MediFix.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eb1d84b-d5ec-480f-bce0-65b428979e2d"),
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = new Guid("bf769d62-8cf1-425f-9291-ab449d55f525"),
                            Name = "Air conditioning"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name", "CategoryId")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01c6d46d-bc00-4072-9884-3757d87dcde3"),
                            CategoryId = new Guid("2eb1d84b-d5ec-480f-bce0-65b428979e2d"),
                            Name = "Toilet"
                        },
                        new
                        {
                            Id = new Guid("9d65f34e-41a1-4075-9a37-7a00848476fa"),
                            CategoryId = new Guid("2eb1d84b-d5ec-480f-bce0-65b428979e2d"),
                            Name = "Tap"
                        },
                        new
                        {
                            Id = new Guid("c9616f56-84fc-42b6-b91b-44d4739e0b92"),
                            CategoryId = new Guid("2eb1d84b-d5ec-480f-bce0-65b428979e2d"),
                            Name = "Water Bar"
                        },
                        new
                        {
                            Id = new Guid("881b7173-023b-4817-9f52-d80d19cf1560"),
                            CategoryId = new Guid("bf769d62-8cf1-425f-9291-ab449d55f525"),
                            Name = "Air conditioner does not cool"
                        },
                        new
                        {
                            Id = new Guid("54b2089e-98bb-4571-955c-1e2d539102df"),
                            CategoryId = new Guid("bf769d62-8cf1-425f-9291-ab449d55f525"),
                            Name = "Noisy air conditioner"
                        });
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LocationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "LocationType", "ParentId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cabf4d3-b1ae-4dc1-8443-c2f937cb4c63"),
                            IsActive = true,
                            LocationType = (byte)1,
                            Name = "A"
                        },
                        new
                        {
                            Id = new Guid("1d9b26c2-0a61-400c-9a91-ff4def93cac1"),
                            IsActive = true,
                            LocationType = (byte)2,
                            Name = "0",
                            ParentId = new Guid("9cabf4d3-b1ae-4dc1-8443-c2f937cb4c63")
                        },
                        new
                        {
                            Id = new Guid("05783986-ead4-40f8-bf13-d695ddeedfa8"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "HR",
                            ParentId = new Guid("1d9b26c2-0a61-400c-9a91-ff4def93cac1")
                        },
                        new
                        {
                            Id = new Guid("747e12bf-b008-4f4c-ab3d-4f8f2afe9a91"),
                            IsActive = true,
                            LocationType = (byte)3,
                            Name = "IT",
                            ParentId = new Guid("1d9b26c2-0a61-400c-9a91-ff4def93cac1")
                        },
                        new
                        {
                            Id = new Guid("3e6884ee-b7c4-48fb-b193-86434baa17d2"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "100",
                            ParentId = new Guid("05783986-ead4-40f8-bf13-d695ddeedfa8")
                        },
                        new
                        {
                            Id = new Guid("87b94ce2-317c-4132-bf4e-3fb4966f4869"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "101",
                            ParentId = new Guid("05783986-ead4-40f8-bf13-d695ddeedfa8")
                        },
                        new
                        {
                            Id = new Guid("52f20790-36d9-4da9-880c-2f90a82511c1"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "102",
                            ParentId = new Guid("05783986-ead4-40f8-bf13-d695ddeedfa8")
                        },
                        new
                        {
                            Id = new Guid("d4b2e72e-ed5a-4506-a09e-c23f6127f179"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "200",
                            ParentId = new Guid("747e12bf-b008-4f4c-ab3d-4f8f2afe9a91")
                        },
                        new
                        {
                            Id = new Guid("7659535b-69f0-44a3-8477-43a550652fb5"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "201",
                            ParentId = new Guid("747e12bf-b008-4f4c-ab3d-4f8f2afe9a91")
                        },
                        new
                        {
                            Id = new Guid("a8b5ee6b-21c1-4b33-918c-141f5fb7b727"),
                            IsActive = true,
                            LocationType = (byte)4,
                            Name = "202",
                            ParentId = new Guid("747e12bf-b008-4f4c-ab3d-4f8f2afe9a91")
                        });
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PractitionerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ServiceCallType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PractitionerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ServiceCalls");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Expertise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MediFix.Domain.Users.Practitioner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertisePractitioner", b =>
                {
                    b.HasOne("MediFix.Domain.Users.Expertise", null)
                        .WithMany()
                        .HasForeignKey("ExpertisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediFix.Domain.Categories.SubCategory", b =>
                {
                    b.HasOne("MediFix.Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MediFix.Domain.Locations.Location", b =>
                {
                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MediFix.Domain.ServiceCalls.ServiceCall", b =>
                {
                    b.HasOne("MediFix.Domain.Users.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Domain.Users.Practitioner", null)
                        .WithMany()
                        .HasForeignKey("PractitionerId");

                    b.HasOne("MediFix.Domain.Categories.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MediFix.Domain.ServiceCalls.ServiceCallStatusUpdate", "StatusHistory", b1 =>
                        {
                            b1.Property<Guid>("ServiceCallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DateTime")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("PractitionerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte>("Status")
                                .HasColumnType("tinyint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ServiceCallId", "DateTime");

                            b1.HasIndex("PractitionerId");

                            b1.ToTable("ServiceCallStatusUpdate");

                            b1.HasOne("MediFix.Domain.Users.Practitioner", null)
                                .WithMany()
                                .HasForeignKey("PractitionerId")
                                .OnDelete(DeleteBehavior.NoAction);

                            b1.WithOwner()
                                .HasForeignKey("ServiceCallId");
                        });

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MediFix.Application.Users.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
